{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 HelveticaNeue-Bold;\f2\fnil\fcharset0 Monaco;
\f3\fmodern\fcharset0 CourierNewPS-BoldMT;\f4\fmodern\fcharset0 CourierNewPSMT;\f5\fmodern\fcharset0 CourierNewPS-ItalicMT;
}
{\colortbl;\red255\green255\blue255;\red34\green45\blue53;\red255\green255\blue255;\red11\green76\blue180;
\red180\green49\blue4;\red133\green35\blue2;\red242\green242\blue242;\red38\green38\blue38;}
{\*\expandedcolortbl;\csgray\c100000;\cssrgb\c17647\c23137\c27059;\cssrgb\c100000\c100000\c100000;\cssrgb\c1961\c38824\c75686;
\cssrgb\c76471\c27059\c0;\cssrgb\c60000\c20000\c0;\cssrgb\c96078\c96078\c96078;\cssrgb\c20000\c20000\c20000;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalb \clshdrawnil \clwWidth8020\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx4320
\clvertalb \clshdrawnil \clwWidth6700\clftsWidth3 \clminw6700 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadb240 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl740\sa120\partightenfactor0

\f0\fs50\fsmilli25200 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Program 4 - OTP\cb1 \cell 
\pard\intbl\itap1\pardeftab720\sl320\qr\partightenfactor0

\fs28 \cf2 \cell \lastrow\row
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\partightenfactor0
\ls1\ilvl0
\b\fs30\fsmilli15400 \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Due
\b0  Jun 8, 2015 by 11:59am 
\b Points
\b0  160 
\b Submitting
\b0  a file upload
\b Available
\b0  May 23, 2015 at 12:01am - Jun 15, 2015 at 11:59am 
\fs24\fsmilli12320 23 days
\fs30\fsmilli15400 \cb1 \uc0\u8232 \
\pard\pardeftab720\sl320\partightenfactor0

\fs28 \cf2 \

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalb \clshdrawnil \clwWidth8020\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx4320
\clmrg \clvertalb \clshdrawnil \clwWidth8020\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl320\partightenfactor0
\cf2 \cb3 This assignment was locked Jun 15, 2015 at 11:59am.\cell 
\pard\intbl\itap1\cell \lastrow\row
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \cb1 \
\pard\pardeftab720\sl740\sa120\partightenfactor0

\f1\b\fs50\fsmilli25200 \cf2 \cb3 Program 4\'a0\'96 CS 344 \'96 Spring 2015
\f0\b0 \cb1 \
\pard\pardeftab720\sl740\sa120\partightenfactor0
\cf2 \cb3 Overview\cb1 \
\pard\pardeftab720\sl320\sa240\partightenfactor0

\fs28 \cf2 \cb3 In this assignment, you will be creating five small programs that encrypt and decrypt information using a one-time pad-like system. I believe that you will find the topic quite fascinating: one of your challenges will be to pull yourself away from the stories of real-world espionage and tradecraft that have used the techniques you will be implementing.\cb1 \
\cb3 These programs serve as a capstone to what you have been learning in this course, and will combine the multi-processing code you have been learning with socket-based inter-process communication. Your programs will also accessible from the command line using standard UNIX features like input/output redirection, and job control. Finally, you will write a short compilation script.\cb1 \
\pard\pardeftab720\sl740\sa120\partightenfactor0

\fs50\fsmilli25200 \cf2 \cb3 Specifications\cb1 \
\pard\pardeftab720\sl320\sa240\partightenfactor0

\fs28 \cf2 \cb3 All execution, compiling, and testing of this program should ONLY be done in\'a0the bash prompt on the\cb1 \uc0\u8232 \cb3 eos-class.engr.oregonstate.edu server.\cb1 \
\cb3 Use the following link as your primary reference on One-Time Pads (OTP):\cb1 \
\pard\pardeftab720\sl320\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "http://en.wikipedia.org/wiki/One-time_pad"}}{\fldrslt \cf4 \cb3 \ul \ulc4 \strokec4 http://en.wikipedia.org/wiki/One-time_pad\
\pard\pardeftab720\sl320\partightenfactor0
\cf5 \ulc5 \strokec5 \'a0(Links to an external site.)\cb1 \ulnone \
}}\pard\pardeftab720\sl320\sa240\partightenfactor0
\cf2 \cb3 The following definitions will be important:\cb1 \
\pard\pardeftab720\sl340\sa240\partightenfactor0

\b \cf2 \cb3 Plaintext
\b0  is the term for the information that you wish to encrypt and protect. It is human readable.\cb1 \

\b \cb3 Ciphertext
\b0  is the term for the plaintext after it has been encrypted by your programs. Ciphertext is not human-readable, and in fact cannot be cracked, if the OTP system is used correctly.\cb1 \
\pard\pardeftab720\sl320\sa240\partightenfactor0
\cf2 \cb3 A 
\b Key
\b0  is the random sequence of characters that will be used to convert Plaintext to Ciphertext, and back again. It must not be re-used, or else the encryption is in danger of being broken.\cb1 \
\cb3 The following excerpt from this Wikipedia article was captured on 2/21/2015:\cb1 \
\pard\pardeftab720\sl320\sa240\partightenfactor0
\cf6 \cb3 \strokec6 \'93Suppose Alice wishes to send the message "HELLO" to Bob. Assume two pads of paper containing identical random sequences of letters were somehow previously produced and securely issued to both. Alice chooses the appropriate unused page from the pad. The way to do this is normally arranged for in advance, as for instance 'use the 12th sheet on 1 May', or 'use the next available sheet for the next message'.\cf2 \cb1 \strokec2 \
\cf6 \cb3 \strokec6 The material on the selected sheet is the key for this message. Each letter from the pad will be combined in a predetermined way with one letter of the message. (It is common, but not required, to assign each letter a numerical value, e.g., "A" is 0, "B" is 1, and so on.)\cf2 \cb1 \strokec2 \
\cf6 \cb3 \strokec6 In this example, the technique is to combine the key and the message using modular addition. The numerical values of corresponding message and key letters are 
\i added
\i0  together, modulo 26. So, if key material begins with "XMCKL" and the message is "HELLO", then the coding would be done as follows:\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl400\partightenfactor0

\f2\fs19\fsmilli9750 \cf6 \cb7 \strokec6 \'a0\'a0\'a0\'a0\'a0 H\'a0\'a0\'a0\'a0\'a0\'a0 E\'a0\'a0\'a0\'a0\'a0\'a0 L\'a0\'a0\'a0\'a0\'a0\'a0 L\'a0\'a0\'a0\'a0\'a0\'a0 O\'a0 message\
\'a0\'a0 7 (H)\'a0\'a0 4 (E)\'a0 11 (L)\'a0 11 (L)\'a0 14 (O) message\
+ 23 (X)\'a0 12 (M)\'a0\'a0 2 (C)\'a0 10 (K)\'a0 11 (L) key\
= 30\'a0\'a0\'a0\'a0\'a0 16\'a0\'a0\'a0\'a0\'a0 13\'a0\'a0\'a0\'a0\'a0 21\'a0\'a0\'a0\'a0\'a0 25\'a0\'a0\'a0\'a0 message + key\
=\'a0 4 (E)\'a0 16 (Q)\'a0 13 (N)\'a0 21 (V)\'a0 25 (Z) message + key (mod 26)\
\'a0\'a0\'a0\'a0\'a0 E\'a0\'a0\'a0\'a0\'a0\'a0 Q\'a0\'a0\'a0\'a0\'a0\'a0 N\'a0\'a0\'a0\'a0\'a0\'a0 V\'a0\'a0\'a0\'a0\'a0\'a0 Z\'a0 \uc0\u8594  ciphertext\cf8 \strokec8 \
\pard\pardeftab720\sl320\sa240\partightenfactor0

\f0\fs28 \cf6 \cb3 \strokec6 If a number is larger than 26, then the remainder, after 
\i subtraction
\i0  of 26, is taken [as the result]. This simply means that if the computations "go past" Z, the sequence starts again at A.\cf2 \cb1 \strokec2 \
\cf6 \cb3 \strokec6 The ciphertext to be sent to Bob is thus "EQNVZ". Bob uses the matching key page and the same process, but in reverse, to obtain the plaintext. Here the key is 
\i subtracted
\i0  from the ciphertext, again using modular arithmetic:\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl400\partightenfactor0

\f2\fs19\fsmilli9750 \cf6 \cb7 \strokec6 \'a0\'a0\'a0\'a0\'a0\'a0 E\'a0\'a0\'a0\'a0\'a0\'a0 Q\'a0\'a0\'a0\'a0\'a0\'a0 N\'a0\'a0\'a0\'a0\'a0\'a0 V\'a0\'a0\'a0\'a0\'a0\'a0 Z\'a0 ciphertext\
\'a0\'a0\'a0 4 (E)\'a0 16 (Q)\'a0 13 (N)\'a0 21 (V)\'a0 25 (Z) ciphertext\
-\'a0 23 (X)\'a0 12 (M)\'a0\'a0 2 (C)\'a0 10 (K)\'a0 11 (L) key\
= -19\'a0\'a0\'a0\'a0\'a0\'a0 4\'a0\'a0\'a0\'a0\'a0 11\'a0\'a0\'a0\'a0\'a0 11\'a0\'a0\'a0\'a0\'a0 14\'a0\'a0\'a0\'a0 ciphertext \'96 key\
=\'a0\'a0 7 (H)\'a0\'a0 4 (E)\'a0 11 (L)\'a0 11 (L)\'a0 14 (O) ciphertext \'96 key (mod 26)\
\'a0\'a0\'a0\'a0\'a0\'a0 H\'a0\'a0\'a0\'a0\'a0\'a0 E\'a0\'a0\'a0\'a0\'a0\'a0 L\'a0\'a0\'a0\'a0\'a0\'a0 L\'a0\'a0\'a0\'a0\'a0\'a0 O\'a0 \uc0\u8594  message\cf8 \strokec8 \
\pard\pardeftab720\sl320\sa240\partightenfactor0

\f0\fs28 \cf6 \cb3 \strokec6 Similar to the above, if a number is negative then 26 is 
\i added
\i0  to make the number zero or higher.\cf2 \cb1 \strokec2 \
\cf6 \cb3 \strokec6 Thus Bob recovers Alice's plaintext, the message "HELLO". Both Alice and Bob destroy the key sheet immediately after use, thus preventing reuse and an attack against the cipher.\'94\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl320\sa240\partightenfactor0
\cf2 \cb3 Your program will encrypt and decrypt plaintext into ciphertext, using a key, in exactly the same fashion as above, except it will be using modulo 27 operations: your 27 characters are the 26 capital letters, and the space character ( ). All 27 characters will be encrypted and decrypted as above.\cb1 \
\cb3 To do this, you will be creating five small programs in C. Two of these will function as \'93daemons\'94, and will be accessed using network sockets. Two will use the daemons to perform work, and the last is a standalone utility.\cb1 \
\cb3 Here are the specifications of the five programs:\cb1 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\f3\b\fs32 \cf2 \cb3 otp_enc_d:
\f0\b0\fs28  This program will run in the background as a daemon. Its function is to perform the actual encoding, as descripted above in the Wikipedia quote. This program will listen on a particular port, assigned when it is first ran, and receives plaintext and a key via that port when a connection to it is made. It will then write back the ciphertext to the process that it is connected to via the same port. Note that the key passed in must be at least as big as the plaintext.\cb1 \
\pard\pardeftab720\sl320\sa240\partightenfactor0
\cf2 \cb3 When 
\f4 otp_enc_d
\f0  makes a connection with 
\f4 otp_enc
\f0 , it must fork off a separate process immediately, and be available to receive more connections. Your version must support up to five concurrent socket connections. In the forked off process, the actual encryption will take place, and the ciphertext will be written back.\cb1 \
\cb3 You may either create a new process every time a connection is made, or set up a pool of five process to handle your encryption tasks. Your system must be able to do five separate encryptions at once, using either method you choose.\cb1 \
\cb3 Use this syntax for 
\f4 otp_enc_d
\f0 :\cb1 \
\pard\pardeftab720\sl400\partightenfactor0

\f2\fs19\fsmilli9750 \cf8 \cb7 \strokec8 otp_enc_d listening_port\
\pard\pardeftab720\sl320\sa240\partightenfactor0

\f0\i\fs28 \cf2 \cb3 \strokec2 listening_port
\i0  is the port that 
\f4 otp_enc_d
\f0  should listen on. You will always start 
\f4 otp_enc_d
\f0  in the background, as follows (the port 57171 is just an example \'96 yours should be able to use any port):\cb1 \
\pard\pardeftab720\sl400\partightenfactor0

\f2\fs19\fsmilli9750 \cf8 \cb7 \strokec8 % otp_enc_d 57171 &\
\pard\pardeftab720\sl320\sa240\partightenfactor0

\f0\fs28 \cf2 \cb3 \strokec2 In all error situations, your program must output errors as appropriate (see grading script below for details), but should not crash or otherwise exit, unless the errors happen when the program is starting up. That is, if given bad input, once running, 
\f4 otp_enc_d
\f0  should recognize the bad input, report an error to the screen, and continue to run.\cb1 \
\cb3 Your 
\f4 otp_enc_d
\f0  should be killable with the 
\f4 -KILL
\f0  signal, as normal: you may not have to do anything for your program to have this ability.\cb1 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\f3\b\fs32 \cf2 \cb3 otp_enc:
\f0\b0\fs28  This program connects to 
\f4 otp_enc_d
\f0 , and asks it to perform a one-time pad style encryption as detailed above. By itself, 
\f4 otp_enc
\f0  doesn\'92t do the encryption. Its syntax is as follows:\cb1 \
\pard\pardeftab720\sl400\partightenfactor0

\f2\fs19\fsmilli9750 \cf8 \cb7 \strokec8 otp_enc plaintext key port\
\pard\pardeftab720\sl320\sa240\partightenfactor0

\f0\fs28 \cf2 \cb3 \strokec2 In this syntax, 
\f5\i plaintext
\f0\i0  is the name of a file in the current directory that contains the plaintext you wish to encrypt. Similarly, 
\f5\i key
\f0\i0  contains the encryption key you wish to use to encrypt the text. Finally, 
\f5\i port
\f0\i0  is the port that 
\f4 otp_enc
\f0  should attempt to connect to 
\f4 otp_enc_d
\f0  on.\cb1 \
\cb3 When 
\f4 otp_enc
\f0  receives the ciphertext, it should output it to 
\i stdout
\i0 . Thus, 
\f4 otp_enc
\f0  can be launched in any of the following methods, and should send its output appropriately:\cb1 \
\pard\pardeftab720\sl400\partightenfactor0

\f2\fs19\fsmilli9750 \cf8 \cb7 \strokec8 % otp_enc myplaintext mykey 57171\cb1 \
\cb7 % otp_enc myplaintext mykey 57171 > myciphertext\cb1 \
\cb7 % otp_enc myplaintext mykey 57171 > myciphertext &\
\pard\pardeftab720\sl320\sa240\partightenfactor0

\f0\fs28 \cf2 \cb3 \strokec2 If 
\f4 otp_enc
\f0  receives key or plaintext files with bad characters in them, or the key file is shorter than the plaintext, it should exit with an error, and set the exit value to 1. If 
\f4 otp_enc
\f0  cannot find the port given, it should report this error, and the bad port, and set the exit value to 2. Otherwise, on successfully running, 
\f4 otp_enc
\f0  should set the exit value to 0. 
\f4 otp_enc
\f0  should NOT be able to connect to 
\f4 otp_dec_d
\f0 , even if it tries to connect on the correct port - you'll need to have the programs reject each other.\cb1 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\f3\b\fs32 \cf2 \cb3 otp_dec_d:
\f0\b0\fs28  This program performs exactly like 
\f4 otp_enc_d
\f0 , in syntax and usage. In this case, however, 
\f4 otp_dec_d
\f0  will decrypt ciphertext it is given, using the passed-in ciphertext and key. Thus, it returns plaintext again to
\f4  otp_dec
\f0 \cb1 \

\f3\b\fs32 \cb3 otp_dec:
\f0\b0\fs28  Similarly, this program will connect to 
\f4 otp_dec_d
\f0  and will ask it to decrypt ciphertext using a passed-in ciphertext and key. It will use the same syntax and usage as 
\f4 otp_enc
\f0 , and must be runnable in the same three ways. 
\f4 otp_dec
\f0  should NOT be able to connect to 
\f4 otp_enc_d
\f0 , even if it tries to connect on the correct port - you'll need to have the programs reject each other.\cb1 \

\f3\b\fs32 \cb3 keygen:
\f0\b0\fs28  This program creates a key file of specified length. The characters in the file generated will be any of the 27 allowed characters, generated using the standard UNIX randomization methods. Do not create spaces every five characters, as has been historically done. Note that you specifically do not have to do any fancy random number generation: we\'92re not looking for cryptographically secure random number generation!\cb1 \
\pard\pardeftab720\sl320\sa240\partightenfactor0
\cf2 \cb3 The syntax for keygen is as follows:\cb1 \
\pard\pardeftab720\sl400\partightenfactor0

\f2\fs19\fsmilli9750 \cf8 \cb7 \strokec8 keygen keylength\
\pard\pardeftab720\sl320\sa240\partightenfactor0

\f0\fs28 \cf2 \cb3 \strokec2 Where 
\f5\i keylength
\f0\i0  is the length of the key file in characters. 
\f4 keygen
\f0  outputs to stdout. Here is an example run, which redirects stdout to a key file of 256 characters called \'93mykey\'94:\cb1 \
\pard\pardeftab720\sl400\partightenfactor0

\f2\fs19\fsmilli9750 \cf8 \cb7 \strokec8 % keygen 256 > mykey\
\pard\pardeftab720\sl340\sa240\partightenfactor0

\f0\b\fs28 \cf2 \cb3 \strokec2 Files and Scripts
\b0 \cb1 \
\pard\pardeftab720\sl320\sa240\partightenfactor0
\cf2 \cb3 You are provided with 5 plaintext files to use ({\field{\*\fldinst{HYPERLINK "https://oregonstate.instructure.com/courses/1516852/files/62275985/download?wrap=1"}}{\fldrslt \cf5 \ul \ulc5 \strokec5 one\cb1 \ulnone }}, {\field{\*\fldinst{HYPERLINK "https://oregonstate.instructure.com/courses/1516852/files/62275990/download?wrap=1"}}{\fldrslt \cf5 \ul \ulc5 \strokec5 two\cb1 \ulnone }}, {\field{\*\fldinst{HYPERLINK "https://oregonstate.instructure.com/courses/1516852/files/62275989/download?wrap=1"}}{\fldrslt \cf5 \ul \ulc5 \strokec5 three\cb1 \ulnone }}, {\field{\*\fldinst{HYPERLINK "https://oregonstate.instructure.com/courses/1516852/files/62275988/download?wrap=1"}}{\fldrslt \cf5 \ul \ulc5 \strokec5 four\cb1 \ulnone }}, {\field{\*\fldinst{HYPERLINK "https://oregonstate.instructure.com/courses/1516852/files/62275987/download?wrap=1"}}{\fldrslt \cf5 \ul \ulc5 \strokec5 five\cb1 \ulnone }}). The grading will use these specific files; do not feel like you have to create others.\cb1 \
\cb3 You are also provided with a {\field{\*\fldinst{HYPERLINK "https://oregonstate.instructure.com/courses/1516852/files/62576475/download?wrap=1"}}{\fldrslt \cf5 \ul \ulc5 \strokec5 grading script\cb1 \ulnone }} ("p4gradingscript") that you can run to test your software. If it passes the tests in the script, and has sufficient commenting, it will receive full points (see below).\cb1 \
\cb3 Finally, you will be required to write a compilation script (see below) that compiles all five of your programs, allowing you to use whatever C code and methods you desire. This will ease grading. Note that only C will be allowed, no C++ or any other language (Python, Perl, awk, etc.).\cb1 \
\pard\pardeftab720\sl340\sa240\partightenfactor0

\b \cf2 \cb3 Example
\b0 \cb1 \
\pard\pardeftab720\sl320\sa240\partightenfactor0
\cf2 \cb3 Here is an example of usage, if you were testing your code from the command line:\cb1 \
\pard\pardeftab720\sl400\partightenfactor0

\f2\fs19\fsmilli9750 \cf8 \cb7 \strokec8 % cat plaintext1\
THE RED GOOSE FLIES AT MIDNIGHT\cb1 \
\cb7 % otp_enc_d 57171 &\cb1 \
\cb7 % otp_dec_d 57172 &\
% keygen 10 > myshortkey\cb1 \
\cb7 % otp_enc plaintext1 myshortkey 57171 > ciphertext1 \cb1 \
\cb7 Error: key \'91myshortkey\'92 is too short\
% echo $?\
1\cb1 \
\cb7 % keygen 1024 > mykey\cb1 \
\cb7 % otp_enc plaintext1 mykey 57171 > ciphertext1\
% cat ciphertext1\cb1 \
\cb7 GU WIRGEWOMGRIFOENBYIWUG T WOFL\cb1 \
\cb7 % keygen 1024 > mykey2\cb1 \
\cb7 % otp_dec ciphertext1 mykey 57172 > plaintext1_a\cb1 \
\cb7 % otp_dec ciphertext1 mykey2 57172 > plaintext1_b\cb1 \
\cb7 % cat plaintext1_a\cb1 \
\cb7 THE RED GOOSE FLIES AT MIDNIGHT\cb1 \
\cb7 % cat plaintext1_b\cb1 \
\cb7 WVIOWBTUEIOBC\'a0 FVTROIROUXA JBWE\cb1 \
\cb7 % cmp plaintext1 plaintext1_a\cb1 \
\cb7 % echo $?\
0\
% cmp plaintext1 plaintext1_b\cb1 \
\cb7 plaintext1 plaintext1_b differ: byte 1, line 1\
% echo $?\
1\cb1 \
\cb7 % otp_enc plaintext5 mykey 57171\cb1 \
\cb7 otp_enc_d error: input contains bad characters\
% otp_enc plaintext3 mykey 57172\cb1 \
\cb7 Error: could not contact otp_enc_d on port 57172\cb1 \
\cb7 % echo $?\
2\
%\
\pard\pardeftab720\sl340\sa240\partightenfactor0

\f0\b\fs28 \cf2 \cb3 \strokec2 Compilation Script
\b0 \cb1 \
\pard\pardeftab720\sl320\sa240\partightenfactor0
\cf2 \cb3 You must also write a short bash shell script called \'93compileall\'94 that merely compiles your five programs. For example, the first two lines might be:\cb1 \
\pard\pardeftab720\sl400\partightenfactor0

\f2\fs19\fsmilli9750 \cf8 \cb7 \strokec8 #!/bin/bash\cb1 \
\cb7 gcc -o otp_enc_d otp_enc_d.c\cb1 \
\cb7 \'85\
\pard\pardeftab720\sl320\sa240\partightenfactor0

\f0\fs28 \cf2 \cb3 \strokec2 This script will be used to compile your software, and must successfully run on our class server. The compilation must create all five programs, in the same directory as \'93compileall\'94, for immediate use by the grading script, which is named \'93p4gradingscript\'94.\cb1 \
\pard\pardeftab720\sl340\sa240\partightenfactor0

\b \cf2 \cb3 About newlines
\b0 \cb1 \
\pard\pardeftab720\sl320\sa240\partightenfactor0
\cf2 \cb3 You are\'a0only supposed to accept the 26 letters of alphabet and the "space" character as valid for encrypting/decrypting. However, all of the plaintext input files end with a newline character. 
\i Text files need to end in a newline character for various reasons.
\i0 \cb1 \
\cb3 When one of your programs\'a0reads in an\'a0input file, strip off the newline. Then encrypt and decrypt the text string, again with no newline character. 
\i When you send the result to stdout, or save results into a file, tack a newline to the end, or your length will be off in the grading script.
\i0  Note that the newline character affects the length of files as reported by the wc command! Try it!\cb1 \
\pard\pardeftab720\sl340\sa240\partightenfactor0

\b \cf2 \cb3 About Reusing Sockets
\b0 \cb1 \
\pard\pardeftab720\sl320\sa240\partightenfactor0
\cf2 \cb3 In the p4gradingscript, you can select which ports to use: I recommend ports in the 50000+ range. However, UNIX doesn't immediately let go of the ports you use after your program finishes! To allow your program to continue to use the same port, read this:\cb1 \
\pard\pardeftab720\sl320\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "http://beej.us/guide/bgnet/output/html/singlepage/bgnet.html#setsockoptman"}}{\fldrslt \cf5 \cb3 \ul \ulc5 \strokec5 http://beej.us/guide/bgnet/output/html/singlepage/bgnet.html#setsockoptman\
\pard\pardeftab720\sl320\partightenfactor0
\cf5 \ulc5 \'a0(Links to an external site.)\cb1 \ulnone \
}}\pard\pardeftab720\sl320\sa240\partightenfactor0
\cf2 \cb3 ...and then play around with this command:\cb1 \
\pard\pardeftab720\sl400\partightenfactor0

\f2\fs19\fsmilli9750 \cf8 \cb7 \strokec8 setsockopt(sock_fd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int));\
\pard\pardeftab720\sl340\sa240\partightenfactor0

\f0\b\fs28 \cf2 \cb3 \strokec2 What to submit
\b0 \cb1 \
\pard\pardeftab720\sl320\sa240\partightenfactor0
\cf2 \cb3 Please submit a single zip file of your program code, which may be in as many different files as you want. Inside that zip file, include the following files\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl320\sa240\partightenfactor0
\ls2\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 All of your program code\cb1 \uc0\u8232 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The compilation script named \'93compileall\'94\cb1 \uc0\u8232 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 All five plaintext# files, numbered 1 through 5\cb1 \uc0\u8232 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 A copy of the grading script named \'93p4gradingscript\'94\cb1 \uc0\u8232 \
\pard\pardeftab720\sl740\sa120\partightenfactor0

\fs50\fsmilli25200 \cf2 \cb3 Hints\cb1 \
\pard\pardeftab720\sl320\sa240\partightenfactor0

\fs28 \cf2 \cb3 I HIGHY recommend that you develop this program directly on the eos-class server. Doing so will prevent you from having problems transferring the program back and forth, which can cause compatibility issues.\cb1 \
\cb3 If you do see ^M characters all over your files, try this command:\cb1 \
\pard\pardeftab720\sl400\partightenfactor0

\f2\fs19\fsmilli9750 \cf8 \cb7 \strokec8 % dos2unix bustedFile\
\pard\pardeftab720\sl740\sa120\partightenfactor0

\f0\fs50\fsmilli25200 \cf2 \cb3 \strokec2 Grading\cb1 \
\pard\pardeftab720\sl320\sa240\partightenfactor0

\fs28 \cf2 \cb3 The graders will run the \'93compileall\'94 script, and will then run the \'93p4gradingscript\'94. They will make a reasonable effort to make your code compile, but if it doesn\'92t compile, you\'92ll receive a zero on this assignment. If it compiles, it will have the \'93p4gradingscript\'94 script ran against it (as detailed above) for final grading. Points will be assigned according to this grading script.\cb1 \
\cb3 150 points are available in the grading script, while the final 10 points will be based on your style, readability, and commenting. Comment well, often, and verbosely: we want to see that you are telling us WHY you are doing things, in addition to telling us WHAT you are doing.\cb1 \
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \
\
}